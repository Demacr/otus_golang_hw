// Code generated by cool go-validate tool; DO NOT EDIT.
package models

import (
    "errors"
    "fmt"
    "regexp"
)

type ValidationError struct {
    Field string
    Err   error
}


func (st User) Validate() ([]ValidationError, error) {
    fmt.Sprintf("Dummy")
    validationErrors := make([]ValidationError, 0)
    if len(st.ID) != 36 {
        validationErrors = append(validationErrors, ValidationError{"ID", errors.New("ID's length is not equal 36")})
    }
    if st.Age < 18 {
        validationErrors = append(validationErrors, ValidationError{"Age", errors.New("Age is less than min value 18")})
    }
    if st.Age > 50 {
        validationErrors = append(validationErrors, ValidationError{"Age", errors.New("Age is more than max value 50")})
    }
    matched, err := regexp.MatchString("^\\w+@\\w+\\.\\w+$", st.Email)
    if err != nil {
        return nil, err
    }

    if !matched {
        validationErrors = append(validationErrors, ValidationError{"Email", errors.New("Email is not matched regexp")})
    }
    switch st.Role {
    case
        "admin",
        "stuff":
    default:
        validationErrors = append(validationErrors, ValidationError{"Role", errors.New("Role is out of IN slice")})
    }
    for index, value := range st.Phones {
        if len(value) != 11 {
            validationErrors = append(validationErrors, ValidationError{"Phones", errors.New(fmt.Sprintf("Phones[%v]'s length is not equal 11", index))})
        }
    }

    return validationErrors, nil
}

func (st App) Validate() ([]ValidationError, error) {
    fmt.Sprintf("Dummy")
    validationErrors := make([]ValidationError, 0)
    if len(st.Version) != 5 {
        validationErrors = append(validationErrors, ValidationError{"Version", errors.New("Version's length is not equal 5")})
    }

    return validationErrors, nil
}

func (st Response) Validate() ([]ValidationError, error) {
    fmt.Sprintf("Dummy")
    validationErrors := make([]ValidationError, 0)
    switch st.Code {
    case 
        200,
        404,
        500:
    default:
        validationErrors = append(validationErrors, ValidationError{"Code", errors.New("Code is out of IN slice")})
    }

    return validationErrors, nil
}
